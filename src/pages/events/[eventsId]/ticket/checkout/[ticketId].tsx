import Head from "next/head";
import Link from "next/link";
import { useState, useEffect } from "react";
import { format } from "path";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faCalendar } from "@fortawesome/free-regular-svg-icons";

export default function Checkout() {
  const [date, setDate] = useState<Date>(new Date());
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);
  const [dateString, setDateString] = useState<string>("");
  const [showPicker, setShowPicker] = useState(false);
  const [qty, setQty] = useState<number>(1);
  const [currentDate, setCurrentDate] = useState(new Date());
  const daysOfWeek = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];

  const increment = () => {
    setQty((prevQty) => prevQty + 1);
  };

  const decrement = () => {
    setQty((prevQty) => prevQty - 1);
  };

  const toggleDatepicker = () => {
    setShowPicker(!showPicker);
  };

  const getDaysInMonth = (month: number, year: number) => {
    return new Date(year, month, 0).getDate();
  };

  const generateCalendar = (currentDate: Date) => {
    const month = currentDate.getMonth();
    const year = currentDate.getFullYear();
    const daysInMonth = getDaysInMonth(month + 1, year);
    const days = [];
    const firstDayOfMonth = new Date(year, month, 1).getDay();

    // Fill the empty spaces until the first day of the month
    for (let i = 0; i < firstDayOfMonth; i++) {
      days.push(null); // null will represent an empty day in the calendar
    }

    for (let i = 1; i <= daysInMonth; i++) {
      days.push(new Date(year, month, i));
    }
    return days;
  };

  const previousMonth = () => {
    setCurrentDate(
      (prevDate) =>
        new Date(prevDate.getFullYear(), prevDate.getMonth() - 1, 1),
    );
  };

  const nextMonth = () => {
    setCurrentDate(
      (prevDate) =>
        new Date(prevDate.getFullYear(), prevDate.getMonth() + 1, 1),
    );
  };

  const holidays = [
    new Date(
      currentDate.getFullYear(),
      currentDate.getMonth(),
      5,
    ) /*... other dates*/,
  ];

  const isHoliday = (date: Date) => {
    return holidays.some((h) => h.toDateString() === date.toDateString());
  };

  const isToday = (date: Date) => {
    return date.toDateString() === new Date().toDateString();
  };

  const handleDateChange = (date: Date) => {
    console.log("gg");
    setDate(date);
    setSelectedDate(date);
    toggleDatepicker();
  };

  const FormatDateToYYYMMDD = (date: Date) => {
    setDateString(`${date.getDate()}-${date.getMonth()}-${date.getFullYear()}`);
  };

  useEffect(() => {
    FormatDateToYYYMMDD(date);
  }, [date]);
  return (
    <>
      <Head>
        <title>Home</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-indigo-900">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-4xl font-extrabold tracking-tight text-white sm:text-[4rem]">
            Checkout Ticket
          </h1>
          <h2 className="text-white sm:text-[1em]">..Almost there</h2>
        </div>
        <div className="flex w-full flex-col items-center justify-center justify-items-center px-5">
          <h3 className="text-lg font-extrabold tracking-tight text-white ">
            Date
          </h3>
          <div
            className="datepicker-container border-1 flex w-1/2 rounded-md bg-gray-200  p-1"
            onClick={toggleDatepicker}
          >
            <div className="datepicker-input flex w-full flex-col bg-white p-2">
              <span className="text-slate-500">Choose Date</span>
              <span id="selectedDate">{dateString.toString()}</span>
            </div>
            <div
              className="datepicker-dropdown flex w-1/2 items-center justify-end bg-white p-2"
              id="datepicker"
            >
              <FontAwesomeIcon
                icon={faCalendar}
                className="fas fa-check"
                style={{ color: "gray" }}
              ></FontAwesomeIcon>
            </div>
          </div>
          <div
            id="datepicker-popup"
            className={`${
              showPicker ? "block" : "hidden"
            } border-1 z-10  rounded-md bg-white w-full sm:absolute sm:w-1/2`}
          >
            <div
              id="datepicker-header"
              className="flex justify-between border-b p-2"
            >
              <span id="currentMonthYear">{`${currentDate.toLocaleString(
                "default",
                { month: "long" },
              )} ${currentDate.getFullYear()}`}</span>
              <div className="control-date">
                <button onClick={previousMonth} className="w-10 text-gray-500">
                  {"<"}
                </button>
                <button onClick={nextMonth} className="w-10 text-gray-500">
                  {">"}
                </button>
              </div>
            </div>
            <div id="datepicker-days" className="grid grid-cols-7 gap-2 p-2">
              {daysOfWeek.map((dayName) => (
                <span key={dayName} className="text-center">
                  {dayName}
                </span>
              ))}
              {generateCalendar(currentDate).map((date, idx) => (
                <span
                  key={idx}
                  className={`text-center ${
                    date && isHoliday(date)
                      ? "cursor-not-allowed text-red-500"
                      : "cursor-pointer"
                  } ${
                    date &&
                    selectedDate &&
                    date.toDateString() === selectedDate.toDateString()
                      ? "bg-blue-400 text-white"
                      : ""
                  } rounded-full hover:bg-blue-100`}
                  onClick={() =>
                    date && isHoliday(date) ? "" : handleDateChange(date!)
                  }
                >
                  <div className="flex h-11 flex-col items-center justify-center">
                    {date && isToday(date) ? (
                      <span
                        className={`absolute mb-8 text-xs ${
                          date &&
                          selectedDate &&
                          date.toDateString() === selectedDate.toDateString()
                            ? "text-white"
                            : "text-blue-400"
                        }`}
                      >
                        Hari ini
                      </span>
                    ) : (
                      ""
                    )}
                    {date ? date.getDate() : ""}
                  </div>
                </span>
              ))}
            </div>
          </div>
        </div>
        <div className="flex w-1/2 items-center justify-center justify-items-center flex-col sm:flex-row">
          <div className="mt-5 flex w-full flex-col items-center justify-center justify-items-center text-lg text-black">
            <h3 className="mb-3 text-lg font-extrabold tracking-tight text-white">
              Ticket Type
            </h3>
            <Link href="/home/events/live/1">
              <button className="relative rounded-lg bg-yellow-500 px-8 py-4 text-xl font-bold text-white transition duration-150 ease-in-out hover:bg-yellow-600 focus:outline-none ">
                <div className=" border-b border-b-2 border-dashed ">
                  <div className="absolute -left-2 -mt-7 h-5 w-5 rounded-full bg-indigo-900"></div>
                  <div className="absolute -right-2 -mt-7 h-5 w-5 rounded-full bg-indigo-900"></div>
                </div>
                Cat 1
                <div className="border-b border-b-2 border-dashed">
                  <div className="absolute -left-2 mt-2 h-5 w-5 rounded-full bg-indigo-900"></div>
                  <div className="absolute -right-2 mt-2 h-5 w-5 rounded-full bg-indigo-900"></div>
                </div>
              </button>
            </Link>
          </div>
          <div className="mt-5 flex w-full flex-col items-center justify-center justify-items-center text-lg text-black">
            <h3 className="text-lg font-extrabold tracking-tight text-white ">
              Quantity
            </h3>
            <div className="flex w-full sm:w-1/2 items-center justify-center">
              <button
                className={`h-7 w-7 rounded-full border-2 border-blue-500 bg-white text-blue-500 ${
                  qty && qty === 1
                    ? "disabled cursor-not-allowed bg-gray-300"
                    : ""
                } hover:bg-blue-500 hover:text-white`}
                onClick={decrement}
              >
                -
              </button>
              <input
                type="number"
                value={qty}
                className="m-3 w-20 rounded-sm p-3"
              ></input>
              <button
                className={`h-7 w-7 rounded-full border-2 border-blue-500 bg-white text-blue-500 ${
                  qty && qty === 1
                    ? "disabled cursor-not-allowed bg-gray-300"
                    : ""
                } hover:bg-blue-500 hover:text-white`}
                onClick={increment}
              >
                +
              </button>
            </div>
          </div>
        </div>
        <button className="mt-5 relative rounded-lg bg-blue-400 p-5 text-white hover:bg-blue-600">
          Proceed â†’
        </button>
      </main>
    </>
  );
}
